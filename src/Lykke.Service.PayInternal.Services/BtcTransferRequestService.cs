using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Common.Log;
using Lykke.Bitcoin.Api.Client.AutoGenerated;
using Lykke.Bitcoin.Api.Client.AutoGenerated.Models;
using Lykke.Service.PayInternal.Core.Domain.Transfer;
using Lykke.Service.PayInternal.Core.Domain.Wallet;
using Lykke.Service.PayInternal.Core.Services;
using Lykke.Service.PayInternal.Services.Domain;
using Newtonsoft.Json;

namespace Lykke.Service.PayInternal.Services
{
    public class BtcTransferRequestService : ITransferRequestService
    {
        private const string BitcoinAssert = "BTC";
        private readonly ITransferRepository _transferRepository;
        private readonly IWalletRepository _walletRepository;
        private readonly IBitcoinApi _bitcointApiClient;
        private readonly ILog _log;

        #region Ctr
        public BtcTransferRequestService(ITransferRepository transferRepository, IWalletRepository walletRepository, IBitcoinApi bitcointApiClient, ILog log)
        {
            _transferRepository = transferRepository;
            _walletRepository = walletRepository;
            _bitcointApiClient = bitcointApiClient;
        }
        #endregion
        #region public
        public async Task<ITransfer> CreateTransferAsync(ITransferRequest transferRequest)
        {
            throw new NotImplementedException();
        }

        public async Task<ITransfer> CreateTransferAsync(ISourcesTransferRequest transferRequest)
        {
            throw new NotImplementedException();
        }

        public async Task<ITransfer> CreateTransferAsync(ISingleSourceTransferRequest transferRequest)
        {
            throw new NotImplementedException();
        }

        public async Task<ITransfer> UpdateTransferStatusAsync(ITransfer transfer)
        {
            throw new NotImplementedException();
        }

       

        public async Task<ITransfer> UpdateTransferAsync(ITransferInfo transfer)
        {
            throw new NotImplementedException();
        }

        public async Task<ITransferInfo> GetTransferInfoAsync(ITransfer transfer)
        {
            throw new NotImplementedException();
        }
        #endregion
        #region private

        private async Task<ITransferInfo> CreateBtcTransfer(List<ISourceAmount> sources, string destination)
        {
            var result = new TransferDto
            {
                DestinationAddress = destination,
                Amount = sources.Sum(s=>s.Amount),
                Currency = BitcoinAssert,
                SourceAddresses = sources,
                TransferStatus = TransferStatus.InProgress,
                TransferStatusError = TransferStatusError.NotError
            };
            var store = new MultipleTransferRequest
            {
                Asset = BitcoinAssert,
                Destination = destination,
                Sources = (from s in sources
                    select new ToOneAddress(s.SourceAddress, s.Amount)).ToList()
            };
            var r = await _bitcointApiClient.ApiTransactionMultipletransferPostWithHttpMessagesAsync();
            var resData = r?.Body as TransactionIdAndHashResponse;
            if (resData?.Hash == null)
            {
                var errorCode = (r?.Body as ApiException)?.Error.Code;
                var errorMessage = (r?.Body as ApiException)?.Error.Message;
                if (resData == null && errorCode == "3")
                {
                    await _log.WriteWarningAsync(nameof(BtcTransferRequestService), nameof(CreateBtcTransfer), JsonConvert.SerializeObject(store), $"Invalid amount. Error on TransactionMultipletransfer: {errorMessage} ({errorCode})");
                    result.TransferStatus = TransferStatus.Error;
                    result.TransferStatusError = TransferStatusError.InvalidAmount;
                    if (await _transferRepository.SaveAsync(result) == null)
                    {
                        result.TransferStatusError = TransferStatusError.InternalError;
                    }
                    return result;
                }

                await _log.WriteWarningAsync(nameof(BtcTransferRequestService), nameof(CreateBtcTransfer), JsonConvert.SerializeObject(store), "Transaction not confirmed.");

                await _log.WriteWarningAsync(nameof(BtcTransferRequestService), nameof(CreateBtcTransfer), JsonConvert.SerializeObject(store), "Transaction not confirmed.");
                result.TransferStatus = TransferStatus.Error;
                result.TransferStatusError = TransferStatusError.NotConfirmed;
                if (await _transferRepository.SaveAsync(result) == null)
                {
                    result.TransferStatusError = TransferStatusError.InternalError;
                }
                return result;
            }

            result.TransactionHash = resData.Hash;
            await _log.WriteInfoAsync(nameof(BtcTransferRequestService), nameof(CreateBtcTransfer), JsonConvert.SerializeObject(result), "Transfer created");
            
            return result;

        }
        #endregion
    }
}
